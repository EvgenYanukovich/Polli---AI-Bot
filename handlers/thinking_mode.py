import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext

from database import db
from config import THINKING_MODE_PROMPT, DEFAULT_TEXT_MODEL

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä–≤–∏—Å AI –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç —Ä–æ—É—Ç–µ—Ä–∞
_ai_service = None

def register_handlers(dp, ai_service):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è"""
    global _ai_service
    _ai_service = ai_service
    
    logger.info("Registering thinking mode handlers")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /think
    router.message.register(toggle_thinking_mode, Command("think"))
    logger.info("Registered /think command handler")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
    router.callback_query.register(
        process_thinking_callback,
        F.data.startswith("thinking_mode_")
    )
    logger.info("Registered thinking mode callback handler")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    # –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    router.message.register(
        handle_message,
        F.text,
        ~Command(commands=["start", "help", "think", "model"])
    )
    logger.info("Registered message handler")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp.include_router(router)
    logger.info("All thinking mode handlers registered successfully")


async def toggle_thinking_mode(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /think"""
    try:
        user_id = message.from_user.id
        current_mode = await db.get_thinking_mode(user_id)
        new_mode = not current_mode
        
        await db.set_thinking_mode(user_id, new_mode)
        
        if new_mode:
            response = "ü§î –†–µ–∂–∏–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω. –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω—è—Ç—å —Ö–æ–¥ —Å–≤–æ–∏—Ö –º—ã—Å–ª–µ–π."
        else:
            response = "‚ú® –†–µ–∂–∏–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω. –í–µ—Ä–Ω—É–ª—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É –æ–±—â–µ–Ω–∏—è."
            
        await message.reply(response)
        logger.info(f"Thinking mode {'enabled' if new_mode else 'disabled'} for user {user_id}")
        
    except Exception as e:
        logger.error(f"Error toggling thinking mode: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def process_thinking_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è"""
    try:
        action = callback.data.split('_')[2]
        if action == "toggle":
            user_id = callback.from_user.id
            current_mode = await db.get_thinking_mode(user_id)
            new_mode = not current_mode
            
            await db.set_thinking_mode(user_id, new_mode)
            
            await callback.message.edit_text(
                f"{'ü§î –†–µ–∂–∏–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω' if new_mode else '‚ú® –†–µ–∂–∏–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω'}"
            )
            await callback.answer()
            
    except Exception as e:
        logger.error(f"Error processing thinking mode callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


async def handle_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —á–∞—Ç–∞
        current_state = await state.get_state()
        if current_state is not None:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        thinking_mode = await db.get_thinking_mode(user_id)
        selected_model = await db.get_user_model(user_id) or DEFAULT_TEXT_MODEL
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        chat = await db.get_active_chat(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.add_chat_message(chat['id'], "user", message.text)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        history = await db.get_chat_history(chat['id'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è AI
        messages = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        if thinking_mode:
            messages.append({
                "role": "system",
                "content": THINKING_MODE_PROMPT
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        for msg in reversed(history):  # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            messages.append({
                "role": msg["role"],
                "content": msg["content"]
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        response = await _ai_service.generate_response(
            messages,
            model=selected_model
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        await db.add_chat_message(chat['id'], "assistant", response)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(response)
        logger.info(f"Response sent to user {user_id}")
        
    except Exception as e:
        logger.error(f"Error processing message: {e}")
        await message.reply(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
