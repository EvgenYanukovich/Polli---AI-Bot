import logging
from aiogram import Router, Bot
from aiogram.types import Message, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import db
from config import DEFAULT_TEXT_MODEL

logger = logging.getLogger(__name__)

router = Router()

def get_commands() -> list[BotCommand]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –º–µ–Ω—é"""
    return [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º"),
        BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        BotCommand(command="think", description="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è"),
        BotCommand(command="model", description="–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è"),
        BotCommand(command="chats", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏")
    ]

def register_handlers(dp, ai_service):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    logger.info("Registering basic command handlers")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    router.message.register(cmd_start, Command("start"))
    router.message.register(cmd_help, Command("help"))
    router.message.register(cmd_model, Command("model"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    router.callback_query.register(
        process_model_callback,
        lambda c: c.data and c.data.startswith("model_")
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä–≤–∏—Å AI –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç —Ä–æ—É—Ç–µ—Ä–∞
    router.ai_service = ai_service
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp.include_router(router)
    logger.info("Basic command handlers registered successfully")


async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        user = message.from_user
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—ç—Ç–æ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞—Å—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —á–∞—Ç)
        await db.create_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        response = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø - —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/think - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
/model - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è
/chats - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!
        """
        
        await message.reply(response)
        logger.info(f"New user started bot: {user.id}")
        
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        help_text = """
ü§ñ –Ø - —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.

–ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/think - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
/model - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è
/chats - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ –∏ –∏—Å—Ç–æ—Ä–∏–µ–π

–í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —è –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
–í —Ä–µ–∂–∏–º–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è —è –ø–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω—è—é —Ö–æ–¥ —Å–≤–æ–∏—Ö –º—ã—Å–ª–µ–π.

–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –Ω–∏–º–∏.
–ö–∞–∂–¥—ã–π —á–∞—Ç —Ö—Ä–∞–Ω–∏—Ç —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!
        """
        
        await message.reply(help_text)
        logger.info(f"Help shown to user: {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"Error in help command: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def cmd_model(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /model"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        ai_service = router.ai_service
        text_models = ai_service.text_models
        
        if not text_models:
            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ
            text_models = await ai_service.get_models()
        
        if not text_models:
            # –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ
            text_models = [
                "gpt-4",
                "gpt-4o",
                "claude",
                "deepseek-chat",
                "llama-3.3-70b",
                "mistral-nemo",
                "qwen-2.5-72b"
            ]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        current_model = await db.get_user_model(user_id) or DEFAULT_TEXT_MODEL
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–µ–ª—è–º–∏
        builder = InlineKeyboardBuilder()
        for model in text_models:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –∫ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
            text = f"‚úÖ {model}" if model == current_model else model
            builder.button(text=text, callback_data=f"model_{model}")
        
        # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
        builder.adjust(2)
        
        await message.reply(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:\n"
            "‚úÖ - —Ç–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å",
            reply_markup=builder.as_markup()
        )
        logger.info(f"Model selection shown to user: {user_id}")
        
    except Exception as e:
        logger.error(f"Error in model command: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def process_model_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ callback data
        model = callback.data.split('_')[1]
        user_id = callback.from_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.update_user_model(user_id, model)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏
        text_models = router.ai_service.text_models or [
            "gpt-4",
            "gpt-4o",
            "gpt-4o-mini",
            "claude",
            "deepseek-chat",
            "deepseek-r1",
            "llama-3.3-70b",
            "mistral-nemo",
            "qwen-2.5-72b",
            "qwen-2.5-coder-32b",
            "gemini-2.0-flash-thinking",
            "gemini-2.0-flash"
        ]
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        for m in text_models:
            text = f"‚úÖ {m}" if m == model else m
            builder.button(text=text, callback_data=f"model_{m}")
        builder.adjust(2)
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:\n"
            "‚úÖ - —Ç–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å",
            reply_markup=builder.as_markup()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏
        await callback.answer(f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {model}")
        logger.info(f"Model changed to {model} for user {user_id}")
        
    except Exception as e:
        logger.error(f"Error processing model callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
