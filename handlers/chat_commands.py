import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import db

logger = logging.getLogger(__name__)

router = Router()

class ChatStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏"""
    waiting_for_chat_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —á–∞—Ç–∞
    waiting_for_chat_rename = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —á–∞—Ç–∞


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ —á–∞—Ç–∞"""
    logger.info("Registering chat command handlers")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /chats
    router.message.register(cmd_chats, Command("chats"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
    router.callback_query.register(
        process_chat_list_callback,
        lambda c: c.data and c.data.startswith("chat_list_")
    )
    router.callback_query.register(
        process_chat_action_callback,
        lambda c: c.data and c.data.startswith("chat_action_")
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —á–∞—Ç–∞
    router.message.register(
        process_chat_name,
        ChatStates.waiting_for_chat_name
    )
    router.message.register(
        process_chat_rename,
        ChatStates.waiting_for_chat_rename
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp.include_router(router)
    logger.info("Chat command handlers registered successfully")


async def show_chat_list_to_chat(chat_id: int, user_id: int, message: Message = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chats = await db.get_user_chats(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        for chat in chats:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —á–∞—Ç—É
            text = f"‚úÖ {chat['name']}" if chat['is_active'] else chat['name']
            builder.button(
                text=text,
                callback_data=f"chat_list_{chat['id']}"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
        builder.button(
            text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç",
            callback_data="chat_list_new"
        )
        
        # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
        builder.adjust(1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n‚úÖ - —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç"
        if message:
            await message.answer(text=text, reply_markup=builder.as_markup())
        else:
            # –î–ª—è callback query –∏—Å–ø–æ–ª—å–∑—É–µ–º bot.send_message
            await message.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=builder.as_markup()
            )
        logger.info(f"Chat list shown to user: {user_id}")
        
    except Exception as e:
        logger.error(f"Error in chats command: {e}")
        error_text = (
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        if message:
            await message.answer(text=error_text)
        else:
            await message.bot.send_message(chat_id=chat_id, text=error_text)


async def show_chat_list(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await show_chat_list_to_chat(message.chat.id, message.from_user.id, message)


async def cmd_chats(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chats"""
    await show_chat_list(message)


async def process_chat_list_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    try:
        action = callback.data.split('_')[2]
        user_id = callback.from_user.id
        
        if action == 'new':
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
            await state.set_state(ChatStates.waiting_for_chat_name)
            await callback.message.edit_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞:",
                reply_markup=None
            )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º —á–∞—Ç–æ–º
            chat_id = int(action)
            builder = InlineKeyboardBuilder()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            builder.button(
                text="üîµ –°–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º",
                callback_data=f"chat_action_activate_{chat_id}"
            )
            builder.button(
                text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",
                callback_data=f"chat_action_rename_{chat_id}"
            )
            builder.button(
                text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                callback_data=f"chat_action_clear_{chat_id}"
            )
            builder.button(
                text="‚ùå –£–¥–∞–ª–∏—Ç—å —á–∞—Ç",
                callback_data=f"chat_action_delete_{chat_id}"
            )
            builder.button(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                callback_data="chat_action_back"
            )
            
            # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
            builder.adjust(1)
            
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=builder.as_markup()
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error processing chat list callback: {e}")
        await callback.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )


async def process_chat_action_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —á–∞—Ç–æ–º"""
    try:
        parts = callback.data.split('_')
        action = parts[2]
        chat = callback.message.chat
        
        if action == 'back':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —á–∞—Ç–æ–≤
            await show_chat_list_to_chat(chat.id, callback.from_user.id, callback.message)
            await callback.answer()
            return
            
        chat_id = int(parts[3])
        
        if action == 'activate':
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
            await db.update_chat(chat_id, is_active=True)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
            await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await show_chat_list_to_chat(chat.id, callback.from_user.id, callback.message)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.answer("–ß–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
        elif action == 'rename':
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —á–∞—Ç–∞
            await state.set_state(ChatStates.waiting_for_chat_rename)
            await state.update_data(chat_id=chat_id)
            await callback.message.edit_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:",
                reply_markup=None
            )
            
        elif action == 'clear':
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            await db.clear_chat_history(chat_id)
            await callback.answer("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
            await show_chat_list_to_chat(chat.id, callback.from_user.id, callback.message)
            
        elif action == 'delete':
            # –£–¥–∞–ª—è–µ–º —á–∞—Ç
            await db.delete_chat(chat_id)
            await callback.answer("–ß–∞—Ç —É–¥–∞–ª–µ–Ω")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
            await show_chat_list_to_chat(chat.id, callback.from_user.id, callback.message)
            
    except Exception as e:
        logger.error(f"Error processing chat action callback: {e}")
        await callback.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )


async def process_chat_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
        chat_id = await db.create_chat(message.from_user.id, message.text)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        await show_chat_list(message)
        
    except Exception as e:
        logger.error(f"Error processing chat name: {e}")
        await message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def process_chat_rename(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —á–∞—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        chat_id = data.get('chat_id')
        
        if chat_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —á–∞—Ç–∞
            await db.update_chat(chat_id, name=message.text)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            await show_chat_list(message)
            
    except Exception as e:
        logger.error(f"Error processing chat rename: {e}")
        await message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —á–∞—Ç–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
